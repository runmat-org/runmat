name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    # Run on pushes for all branches, and only on PRs from forks to avoid double CI on same-repo PRs
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true)
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux-x86_64
          - os: windows-latest
            name: windows-x86_64
          - os: macos-latest
            name: macos-universal
    runs-on: ${{ matrix.os }}
    env:
      # Ensure single-threaded tests for GC stability
      RUST_TEST_THREADS: 1
      MATRIX_NAME: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Install Linux system dependencies (BLAS/LAPACK, ZMQ, GUI)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            libopenblas-dev liblapack-dev \
            libzmq3-dev pkg-config \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-0 libwayland-dev \
            libegl1-mesa-dev libgl1-mesa-dev \
            libudev-dev libdbus-1-dev ca-certificates

      - name: Install macOS dependencies (ZMQ)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install zeromq

      - name: Install Windows dependencies (ZMQ)
        if: runner.os == 'Windows'
        run: |
          choco install -y zeromq

      - name: Format
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check
        run: cargo check --all-targets --all-features

      - name: Test
        env:
          RUST_TEST_THREADS: 1
        run: |
          set -o pipefail
          cargo test --all-targets --all-features 2>&1 -- --test-threads=1 | tee test.log

      - name: Test Summary
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const log = fs.readFileSync('test.log', 'utf8');
            const matrixName = process.env.MATRIX_NAME || 'matrix';
            let totalPassed = 0;
            let totalFailed = 0;
            let current = '';
            const details = [];
            for (const line of log.split('\n')) {
              const run = line.match(/Running .*deps\/(.+?)-[a-f0-9]+\)/);
              if (run) current = run[1];
              const m = line.match(/test result: .*?(\d+) passed; (\d+) failed.*finished in ([0-9.]+)s/);
              if (m) {
                const passed = parseInt(m[1], 10);
                const failed = parseInt(m[2], 10);
                totalPassed += passed;
                totalFailed += failed;
                details.push(`- ${matrixName} / ${current || 'crate'}: ${passed} passed, ${failed} failed (${m[3]}s)`);
                current = '';
              }
            }
            let body = '**Test Summary**\n';
            body += details.join('\n');
            body += `\n**Totals**: ${totalPassed} passed, ${totalFailed} failed`;
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            } else {
              console.log(body);
            }
