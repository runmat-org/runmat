name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  VERSION: ${{ github.ref_name }}

jobs:
  build-release:
    name: Build ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: freebsd-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: runmat
            name: runmat-freebsd-x86_64.tar.gz
            command: build

          - release_for: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: runmat.exe
            name: runmat-windows-x86_64.zip
            command: build

          - release_for: windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: runmat.exe
            name: runmat-windows-aarch64.zip
            command: build

          - release_for: macos-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: runmat
            name: runmat-darwin-x86_64.tar.gz
            command: build

          - release_for: macos-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: runmat
            name: runmat-darwin-aarch64.tar.gz
            command: build

          - release_for: linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: runmat
            name: runmat-linux-x86_64.tar.gz
            command: build

          - release_for: linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            bin: runmat
            name: runmat-linux-aarch64.tar.gz
            command: build

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install BLAS/LAPACK dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenblas-dev liblapack-dev

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--locked --release --bin runmat --features blas-lapack"
          strip: true

      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          ARTIFACT_NAME="runmat-${{ env.VERSION }}-${{ matrix.platform.release_for }}"
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${ARTIFACT_NAME}.zip ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${ARTIFACT_NAME}.tar.gz ${{ matrix.platform.bin }}
          fi
          cd -

      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: runmat-${{ env.VERSION }}-${{ matrix.platform.release_for }}
          path: "runmat-*"

  create-release:
    name: Create Release
    needs: [build-release, publish-crates]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: RunMat ${{ github.ref_name }}
          body: |
            ## RunMat ${{ github.ref_name }}
            
            High-performance MATLAB/Octave runtime with Jupyter kernel support.
            
            ### Installation
            
            #### Quick Install (Recommended)
            ```bash
            # Linux/macOS
            curl -fsSL https://runmat.org/install.sh | sh
            
            # Windows (PowerShell)
            iwr https://runmat.org/install.ps1 | iex
            ```
            
            #### Manual Installation
            1. Download the appropriate binary for your platform below
            2. Extract the archive
            3. Add the binary to your PATH
            
            ### Documentation
            - [Getting Started](https://runmat.org/docs/getting-started)
          files: |
            artifacts/**/*
          draft: false
          prerelease: false

  publish-crates:
    name: Publish crates to crates.io
    needs: [build-release]
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-workspaces
        run: cargo install cargo-workspaces --locked

      - name: Derive release version (strip leading 'v')
        shell: bash
        run: |
          RAW_VERSION="${{ env.VERSION }}"
          CLEAN_VERSION=${RAW_VERSION#v}
          echo "RELEASE_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
          echo "Using release version: $CLEAN_VERSION"

      - name: Ensure LICENSE is included in each crate
        shell: bash
        run: |
          set -euxo pipefail
          for d in crates/*; do
            if [ -d "$d" ]; then
              # Copy root LICENSE to each crate as LICENSE (crates.io requires in-package)
              if [ -f LICENSE ] || [ -f LICENSE.md ]; then
                cp -f LICENSE* "$d/" || true
                # Normalize to LICENSE for crates.io scanners
                if [ -f "$d/LICENSE.md" ]; then mv -f "$d/LICENSE.md" "$d/LICENSE"; fi
              fi
            fi
          done

      - name: Normalize Cargo.toml license metadata
        shell: bash
        run: |
          set -euxo pipefail
          for toml in crates/*/Cargo.toml; do
            # If license-file points outside the crate, retarget it to in-crate LICENSE
            if grep -q '^license-file\s*=\s*"\..*/LICENSE' "$toml"; then
              sed -i.bak 's#^license-file\s*=\s*"\..*/LICENSE.*#license-file = "LICENSE"#' "$toml"
              rm -f "$toml.bak"
            fi
            # If license not set at all, but LICENSE exists, add MIT license fallback
            if ! grep -q '^license\s*=' "$toml" && [ -f "${toml%/*}/LICENSE" ]; then
              # Append license = "MIT" under [package] if not present
              awk 'BEGIN{printed=0} {print} /^\[package\]/{if(!printed){print "license = \"MIT\""; printed=1}}' "$toml" > "$toml.tmp" && mv "$toml.tmp" "$toml"
            fi
          done

      - name: Bump workspace crate versions
        shell: bash
        run: |
          set -euxo pipefail
          cargo workspaces version "$RELEASE_VERSION" \
            --force '*' \
            --no-git-commit --no-git-tag \
            --exact

      - name: Publish all crates in dependency order
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          set -euxo pipefail
          # Publish in correct order, skipping already published crates
          cargo workspaces publish --all --yes --allow-dirty --skip-published \
            --token "$CARGO_REGISTRY_TOKEN"
