use std::fs::{create_dir_all, write};
use std::path::Path;

use anyhow::{Context, Result};
use serde_json;

use crate::builtin::metadata::BuiltinManifest;

pub fn write_manifest_files(manifest: &BuiltinManifest, out_dir: &Path) -> Result<()> {
    create_dir_all(out_dir).with_context(|| format!("creating {}", out_dir.display()))?;

    let json_path = out_dir.join("builtins.json");
    let json_content = serde_json::to_string_pretty(manifest)?;
    write(&json_path, json_content).with_context(|| format!("writing {}", json_path.display()))?;

    let dts_path = out_dir.join("builtins.d.ts");
    write(&dts_path, typescript_definition())
        .with_context(|| format!("writing {}", dts_path.display()))?;

    Ok(())
}

fn typescript_definition() -> String {
    r#"// Auto-generated by runmatfunc docs emit
export interface BuiltinRecord {
  name: string;
  category: string | null;
  summary: string | null;
  keywords: string[];
  accel_tags: string[];
  is_sink: boolean;
  doc_markdown: string | null;
  param_types: string[];
  return_type: string;
}

export interface BuiltinManifest {
  builtins: BuiltinRecord[];
}
"#
    .to_string()
}
